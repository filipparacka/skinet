{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ShopService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'https://localhost:5001/api/';\n  }\n  getProducts() {\n    return this.http.get(this.baseUrl + 'products');\n  }\n  getBrands() {\n    return this.http.get(this.baseUrl + 'products/brands');\n  }\n  getTypes() {\n    return this.http.get(this.baseUrl + 'products/types');\n  }\n}\nShopService.ɵfac = function ShopService_Factory(t) {\n  return new (t || ShopService)(i0.ɵɵinject(i1.HttpClient));\n};\nShopService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ShopService,\n  factory: ShopService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAUA,OAAM,MAAOA,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFxB,YAAO,GAAG,6BAA6B;EAEC;EAExCC,WAAW;IACT,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAwB,IAAI,CAACC,OAAO,GAAG,UAAU,CAAC;EACxE;EAEAC,SAAS;IACP,OAAO,IAAI,CAACJ,IAAI,CAACE,GAAG,CAAU,IAAI,CAACC,OAAO,GAAG,iBAAiB,CAAC;EACjE;EAEAE,QAAQ;IACN,OAAO,IAAI,CAACL,IAAI,CAACE,GAAG,CAAS,IAAI,CAACC,OAAO,GAAG,gBAAgB,CAAC;EAC/D;;AAfWL,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAQ,SAAXR,WAAW;EAAAS,YAFV;AAAM","names":["ShopService","constructor","http","getProducts","get","baseUrl","getBrands","getTypes","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Filip\\source\\repos\\skinet\\skinet\\ClientApp\\src\\app\\shop\\shop.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Brand } from '../shared/models/brand';\r\nimport { Pagination } from '../shared/models/pagination';\r\nimport { Product } from '../shared/models/product';\r\nimport { Type } from '../shared/models/type';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ShopService {\r\n  baseUrl = 'https://localhost:5001/api/'\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getProducts() {\r\n    return this.http.get<Pagination<Product[]>>(this.baseUrl + 'products');\r\n  }\r\n\r\n  getBrands() {\r\n    return this.http.get<Brand[]>(this.baseUrl + 'products/brands');\r\n  }\r\n\r\n  getTypes() {\r\n    return this.http.get<Type[]>(this.baseUrl + 'products/types');\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}